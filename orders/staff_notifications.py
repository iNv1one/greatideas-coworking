"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª—É –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö
"""
import logging
import asyncio
from typing import Optional
from django.conf import settings
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import TelegramError
from asgiref.sync import sync_to_async

logger = logging.getLogger(__name__)


class StaffNotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞"""
    
    def __init__(self):
        self.bot_token = settings.STAFF_BOT_TOKEN
        self.chat_id = settings.STAFF_CHAT_ID
        
        if not self.bot_token:
            raise ValueError("STAFF_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        
        if not self.chat_id:
            logger.warning("STAFF_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è.")
        
        self.bot = Bot(token=self.bot_token)
    
    def send_new_order_notification_sync(self, order) -> Optional[int]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
        import threading
        import asyncio
        
        result = [None]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–µ–∂–¥—É –ø–æ—Ç–æ–∫–∞–º–∏
        exception = [None]
        
        def run_async():
            try:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                try:
                    result[0] = loop.run_until_complete(self.send_new_order_notification(order))
                finally:
                    loop.close()
            except Exception as e:
                exception[0] = e
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=run_async)
        thread.start()
        thread.join(timeout=30)  # –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
        
        if exception[0]:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {exception[0]}")
            return None
            
        return result[0]
    
    async def send_new_order_notification(self, order) -> Optional[int]:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—É
        
        Args:
            order: –æ–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏ Order
            
        Returns:
            int: ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if not self.chat_id:
            logger.warning("STAFF_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            return None
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            message_text = await self._format_order_message(order)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"
            keyboard = InlineKeyboardButton(
                "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", 
                callback_data=f"deliver_order_{order.id}"
            )
            reply_markup = InlineKeyboardMarkup([[keyboard]])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = await self.bot.send_message(
                chat_id=self.chat_id,
                text=message_text,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
            await self._update_order_notification_status(order, message.message_id)
            
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ #{order.order_number} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—É")
            return message.message_id
            
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ #{order.order_number}: {e}")
            return None
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return None
    
    async def _format_order_message(self, order) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ"""
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
        items_text = ""
        items = await sync_to_async(lambda: list(order.items.all()))()
        
        for order_item in items:
            item_text = f"‚Ä¢ {order_item.menu_item.name}"
            
            if order_item.variant:
                item_text += f" ({order_item.variant.name})"
            
            if order_item.quantity > 1:
                item_text += f" x{order_item.quantity}"
            
            if order_item.selected_addons.exists():
                addons = await sync_to_async(lambda: list(order_item.selected_addons.all()))()
                addon_names = [addon.addon.name for addon in addons]
                item_text += f" + {', '.join(addon_names)}"
            
            item_text += f" - {order_item.total_price} ‚ÇΩ"
            items_text += item_text + "\n"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—É—á–µ–Ω–∏—è
        delivery_type = "üèÉ –°–∞–º–æ–≤—ã–≤–æ–∑" if order.delivery_type == 'pickup' else "üöö –î–æ—Å—Ç–∞–≤–∫–∞"
        
        message_text = f"""
üÜï *–ù–û–í–´–ô –ó–ê–ö–ê–ó #{order.order_number}*

üè™ *–ö–∞—Ñ–µ:* {order.cafe.name}
üë§ *–ö–ª–∏–µ–Ω—Ç:* {order.customer_name}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {order.customer_phone}
{delivery_type}

üìã *–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:*
{items_text}
üí∞ *–û–±—â–∞—è —Å—É–º–º–∞:* {order.total_amount} ‚ÇΩ

‚è∞ *–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞:* {order.created_at.strftime('%H:%M')}
"""
        
        if order.delivery_type == 'delivery' and order.delivery_address:
            message_text += f"üìç *–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:* {order.delivery_address}\n"
        
        if order.comment:
            message_text += f"üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {order.comment}\n"
        
        return message_text.strip()
    
    @sync_to_async
    def _update_order_notification_status(self, order, message_id: int):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
        order.staff_notification_sent = True
        order.staff_message_id = message_id
        order.save(update_fields=['staff_notification_sent', 'staff_message_id'])
    
    async def mark_order_delivered(self, order_id: int, user_name: str = "–ü–µ—Ä—Å–æ–Ω–∞–ª") -> bool:
        """
        –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π
        
        Args:
            order_id: ID –∑–∞–∫–∞–∑–∞
            user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–º–µ—Ç–∏–ª –¥–æ—Å—Ç–∞–≤–∫—É
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            from django.utils import timezone
            from .models import Order
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
            order = await sync_to_async(Order.objects.get)(id=order_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            order.status = 'delivered'
            order.delivered_at = timezone.now()
            await sync_to_async(order.save)(update_fields=['status', 'delivered_at'])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
            if order.staff_message_id:
                await self._update_staff_message(order, user_name)
            
            logger.info(f"–ó–∞–∫–∞–∑ #{order.order_number} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_name}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –∑–∞–∫–∞–∑–∞ {order_id} –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ: {e}")
            return False
    
    async def _update_staff_message(self, order, user_name: str):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∞–≤–∫–∏"""
        try:
            new_text = f"‚úÖ *–ó–ê–ö–ê–ó #{order.order_number} –î–û–°–¢–ê–í–õ–ï–ù*\n\n"
            new_text += f"üë§ –î–æ—Å—Ç–∞–≤–∏–ª: {user_name}\n"
            new_text += f"‚è∞ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {order.delivered_at.strftime('%H:%M')}\n"
            new_text += f"üè™ –ö–∞—Ñ–µ: {order.cafe.name}\n"
            new_text += f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.customer_name}"
            
            await self.bot.edit_message_text(
                chat_id=self.chat_id,
                message_id=order.staff_message_id,
                text=new_text,
                parse_mode='Markdown'
            )
            
        except TelegramError as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
staff_notification_service = StaffNotificationService()


def send_order_notification_sync(order):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        return loop.run_until_complete(
            staff_notification_service.send_new_order_notification(order)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return None
    finally:
        loop.close()
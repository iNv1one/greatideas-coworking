import os
import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from django.core.management.base import BaseCommand
from django.conf import settings
from asgiref.sync import sync_to_async

from users.models import TelegramUser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class TelegramBot:
    def __init__(self):
        self.token = settings.TELEGRAM_BOT_TOKEN
        if not self.token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        
        self.application = Application.builder().token(self.token).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        from telegram.ext import PreCheckoutQueryHandler, MessageHandler, filters
        
        self.application.add_handler(CommandHandler("start", self.start_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
        self.application.add_handler(PreCheckoutQueryHandler(self.handle_pre_checkout_query))
        self.application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, self.handle_successful_payment))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—á–µ—Ä–µ–∑ sync_to_async)
        @sync_to_async
        def save_telegram_user():
            telegram_user, created = TelegramUser.objects.get_or_create(
                telegram_id=user.id,
                defaults={
                    'username': user.username or '',
                    'first_name': user.first_name or '',
                    'last_name': user.last_name or '',
                    'language_code': user.language_code or 'ru'
                }
            )
            
            if not created:
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                telegram_user.username = user.username or ''
                telegram_user.first_name = user.first_name or ''
                telegram_user.last_name = user.last_name or ''
                telegram_user.save()
            
            return telegram_user, created
        
        telegram_user, created = await save_telegram_user()
        
        welcome_text = f"""
üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GreatIdeas Coworking!*

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

*GreatIdeas* ‚Äî —ç—Ç–æ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥ —Å –æ—Ç–ª–∏—á–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π.

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!
        """
        
        await update.message.reply_text(
            welcome_text,
            parse_mode='Markdown'
        )
    

    
    async def handle_pre_checkout_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ pre-checkout –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞)"""
        query = update.pre_checkout_query
        
        try:
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
            await query.answer(ok=True)
            logger.info(f"Pre-checkout –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ pre-checkout: {e}")
            await query.answer(ok=False, error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞")
    
    async def handle_successful_payment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π"""
        payment = update.message.successful_payment
        user = update.effective_user
        
        try:
            logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {payment.total_amount/100} {payment.currency}")
            logger.info(f"Invoice payload: {payment.invoice_payload}")
            logger.info(f"Provider payment charge id: {payment.provider_payment_charge_id}")
            
            # –ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑ –ø–æ invoice_payload –∏–ª–∏ provider_payment_charge_id
            order = await self._find_order_by_payment(payment)
            
            if order:
                # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
                await self._update_order_status(order, 'confirmed')
                
                # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—É
                await self._notify_staff_about_order(order)
                
                # –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await self._clear_user_cart(user.id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –Ω–æ–º–µ—Ä–æ–º –∑–∞–∫–∞–∑–∞ –∏ —Å—Å—ã–ª–∫–æ–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                tracking_url = f"https://coworking.greatideas.ru/orders/status/{order.order_number}/"
                
                keyboard = [
                    [InlineKeyboardButton("üîç –û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑", url=tracking_url)]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    f"‚úÖ *–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω!*\n"
                    f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: *#{order.order_number}*\n"
                    f"–°—É–º–º–∞: {payment.total_amount/100} {payment.currency}\n"
                    f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ\n\n"
                    f"üìã –í–∞—à –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –≤ –∫–∞—Ñ–µ –∏ –≥–æ—Ç–æ–≤–∏—Ç—Å—è.\n"
                    f"üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤.\n\n"
                    f"üè™ –ö–∞—Ñ–µ: {order.cafe.name}\n"
                    f"üìç {order.cafe.address}\n\n"
                    f"üëÜ *–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞*",
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
            else:
                # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω
                await update.message.reply_text(
                    f"‚úÖ *–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω!*\n"
                    f"–°—É–º–º–∞: {payment.total_amount/100} {payment.currency}\n"
                    f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ\n\n"
                    f"–í–∞—à –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.",
                    parse_mode='Markdown'
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
    
    @sync_to_async
    def _find_order_by_payment(self, payment):
        """–ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑ –ø–æ –¥–∞–Ω–Ω—ã–º –ø–ª–∞—Ç–µ–∂–∞"""
        from payments.models import Payment as PaymentModel
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ invoice_payload
            if payment.invoice_payload:
                payment_record = PaymentModel.objects.filter(
                    invoice_payload=payment.invoice_payload
                ).first()
                if payment_record:
                    return payment_record.order
            
            # –ó–∞—Ç–µ–º –ø–æ provider_payment_charge_id
            if payment.provider_payment_charge_id:
                payment_record = PaymentModel.objects.filter(
                    provider_payment_charge_id=payment.provider_payment_charge_id
                ).first()
                if payment_record:
                    return payment_record.order
            
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞: {e}")
            return None
    
    @sync_to_async
    def _update_order_status(self, order, status):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"""
        try:
            order.status = status
            order.save(update_fields=['status'])
            logger.info(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order.order_number} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{status}'")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞: {e}")
    
    async def _notify_staff_about_order(self, order):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—É –æ –Ω–æ–≤–æ–º—É –∑–∞–∫–∞–∑–µ"""
        try:
            from orders.staff_notifications import staff_notification_service
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –Ω–∞–ø—Ä—è–º—É—é –≤ sync_to_async
            await sync_to_async(staff_notification_service.send_new_order_notification_sync)(order)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—É: {e}")
    

    
    @sync_to_async
    def _clear_user_cart(self, telegram_user_id):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            from users.models import TelegramUser
            from orders.models import Order
            telegram_user = TelegramUser.objects.filter(telegram_id=telegram_user_id).first()
            if telegram_user:
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'pending' (–∫–æ—Ä–∑–∏–Ω–∞)
                pending_orders = Order.objects.filter(user=telegram_user, status='pending')
                count = pending_orders.count()
                for order in pending_orders:
                    order.delete()
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ {count} –∑–∞–∫–∞–∑–æ–≤-–∫–æ—Ä–∑–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
    
    def run_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram Bot –≤ —Ä–µ–∂–∏–º–µ polling...")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ run_polling, –∫–æ—Ç–æ—Ä—ã–π —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç event loop
        self.application.run_polling(drop_pending_updates=True)


class Command(BaseCommand):
    help = '–ó–∞–ø—É—Å–∫ Telegram Bot'
    
    def handle(self, *args, **options):
        try:
            self.stdout.write("–ó–∞–ø—É—Å–∫ Telegram Bot...")
            bot = TelegramBot()
            
            # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
            bot.run_polling()
                
        except KeyboardInterrupt:
            self.stdout.write(
                self.style.SUCCESS('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
            )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'–û—à–∏–±–∫–∞: {e}')
            )
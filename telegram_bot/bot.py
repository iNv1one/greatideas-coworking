import os
import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, LabeledPrice
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, PreCheckoutQueryHandler, MessageHandler, filters
from django.core.management.base import BaseCommand
from django.conf import settings
from cafes.models import Cafe
from users.models import TelegramUser
from orders.telegram_payments import TelegramPaymentService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class TelegramBot:
    def __init__(self):
        self.token = settings.TELEGRAM_BOT_TOKEN
        if not self.token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        
        self.application = Application.builder().token(self.token).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("pay", self.test_payment_command))
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        self.application.add_handler(PreCheckoutQueryHandler(self.pre_checkout_callback))
        self.application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, self.successful_payment_callback))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        telegram_user, created = TelegramUser.objects.get_or_create(
            telegram_id=user.id,
            defaults={
                'username': user.username or '',
                'first_name': user.first_name or '',
                'last_name': user.last_name or '',
                'language_code': user.language_code or 'ru'
            }
        )
        
        if not created:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            telegram_user.username = user.username or ''
            telegram_user.first_name = user.first_name or ''
            telegram_user.last_name = user.last_name or ''
            telegram_user.save()
        
        welcome_text = f"""
üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GreatIdeas!*

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

*GreatIdeas* ‚Äî —ç—Ç–æ —Å–µ—Ç—å —É—é—Ç–Ω—ã—Ö –∫–∞—Ñ–µ —Å –æ—Ç–ª–∏—á–Ω–æ–π –µ–¥–æ–π –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π. 

üè™ *–ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:*
‚Ä¢ –ù–µ—Å–∫–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ñ–µ
‚Ä¢ –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ –º–µ–Ω—é –≤ –∫–∞–∂–¥–æ–º –∑–∞–≤–µ–¥–µ–Ω–∏–∏  
‚Ä¢ –£–¥–æ–±–Ω—ã–π –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –∏–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑

–û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞:
        """
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å Web App –∫–Ω–æ–ø–∫–æ–π
        web_app_url = "http://127.0.0.1:8000/"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω
        keyboard = [
            [InlineKeyboardButton(
                "ÔøΩ –û—Ç–∫—Ä—ã—Ç—å GreatIdeas", 
                web_app=WebAppInfo(url=web_app_url)
            )],
            [InlineKeyboardButton("‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ", callback_data="about_service")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            welcome_text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
ü§ñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É GreatIdeas*

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑:*
1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "–í—ã–±—Ä–∞—Ç—å –∫–∞—Ñ–µ"
2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–µ—Å—è –∫–∞—Ñ–µ
3Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ñ–µ
4Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –±–ª—é–¥–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
5Ô∏è‚É£ –û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑

*–°–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è:*
üö∂‚Äç‚ôÇÔ∏è –°–∞–º–æ–≤—ã–≤–æ–∑ - –±–µ—Å–ø–ª–∞—Ç–Ω–æ
üèçÔ∏è –î–æ—Å—Ç–∞–≤–∫–∞ - –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º –∫–∞—Ñ–µ

*–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?*
–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start
        """
        
        keyboard = [
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
            [InlineKeyboardButton("üè™ –í—ã–±—Ä–∞—Ç—å –∫–∞—Ñ–µ", callback_data="show_cafes")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            help_text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "main_menu":
            await self.show_main_menu(query)
        elif query.data == "show_cafes":
            await self.show_cafes(query)
        elif query.data == "about_service":
            await self.show_about_service(query)
        elif query.data.startswith("cafe_"):
            cafe_id = query.data.replace("cafe_", "")
            await self.show_cafe_details(query, cafe_id)
    
    async def show_main_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user = query.from_user
        
        welcome_text = f"""
üéâ *GreatIdeas - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        
        keyboard = [
            [InlineKeyboardButton("üè™ –í—ã–±—Ä–∞—Ç—å –∫–∞—Ñ–µ", callback_data="show_cafes")],
            [InlineKeyboardButton("‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ", callback_data="about_service")],
            [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-—Å–∞–π—Ç", url="http://127.0.0.1:8000/")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            welcome_text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    async def show_cafes(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ñ–µ"""
        cafes = Cafe.objects.filter(is_active=True).order_by('name')
        
        if not cafes.exists():
            text = """
üòî *–ö–∞—Ñ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã*

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Å–µ –∫–∞—Ñ–µ –∑–∞–∫—Ä—ã—Ç—ã –∏–ª–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µ!
            """
            keyboard = [
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
            ]
        else:
            text = f"""
üè™ *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ñ–µ ({cafes.count()} –¥–æ—Å—Ç—É–ø–Ω–æ)*

–ö–∞–∂–¥–æ–µ –∫–∞—Ñ–µ –∏–º–µ–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É:
            """
            
            keyboard = []
            for cafe in cafes:
                keyboard.append([
                    InlineKeyboardButton(
                        f"‚òï {cafe.name}",
                        callback_data=f"cafe_{cafe.id}"
                    )
                ])
            
            keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    async def show_cafe_details(self, query, cafe_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–∞—Ñ–µ"""
        try:
            cafe = Cafe.objects.get(id=cafe_id, is_active=True)
            
            text = f"""
‚òï *{cafe.name}*

{cafe.description}

üìç *–ê–¥—Ä–µ—Å:* {cafe.address}
üïí *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:* {cafe.working_hours}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {cafe.phone}
"""
            
            if cafe.min_order_amount > 0:
                text += f"üí∞ *–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑:* {cafe.min_order_amount} ‚ÇΩ\n"
            
            if cafe.delivery_fee > 0:
                text += f"üöö *–î–æ—Å—Ç–∞–≤–∫–∞:* {cafe.delivery_fee} ‚ÇΩ\n"
            
            text += f"""

üçΩÔ∏è –û—Ç–∫—Ä–æ–π—Ç–µ –º–µ–Ω—é –∫–∞—Ñ–µ –∏ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –±–ª—é–¥–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É!
            """
            
            keyboard = [
                [InlineKeyboardButton(
                    "üçΩÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", 
                    url=f"http://127.0.0.1:8000/cafe/{cafe.id}/"
                )],
                [InlineKeyboardButton("üè™ –î—Ä—É–≥–∏–µ –∫–∞—Ñ–µ", callback_data="show_cafes")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
        except Cafe.DoesNotExist:
            text = "üòî –ö–∞—Ñ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
            keyboard = [
                [InlineKeyboardButton("üè™ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ", callback_data="show_cafes")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    async def show_about_service(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–µ"""
        text = """
‚ÑπÔ∏è *–û —Å–µ—Ä–≤–∏—Å–µ GreatIdeas*

*GreatIdeas* ‚Äî —ç—Ç–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–µ—Ç—å –∫–∞—Ñ–µ, –∫–æ—Ç–æ—Ä–∞—è –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –ª—É—á—à–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –ø–æ–¥ –µ–¥–∏–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π.

üéØ *–ù–∞—à–∞ –º–∏—Å—Å–∏—è:*
–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –µ–¥—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–¥–æ–±–Ω—ã–º –∏ –±—ã—Å—Ç—Ä—ã–º, —Å–æ—Ö—Ä–∞–Ω—è—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –∫–∞—Ñ–µ.

‚ú® *–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:*
‚Ä¢ üè™ –ù–µ—Å–∫–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ñ–µ
‚Ä¢ üçΩÔ∏è –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ üì± –£–¥–æ–±–Ω—ã–π –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ Telegram
‚Ä¢ ‚ö° –ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ
‚Ä¢ üöö –î–æ—Å—Ç–∞–≤–∫–∞ –∏–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑
‚Ä¢ üí≥ –£–¥–æ–±–Ω–∞—è –æ–ø–ª–∞—Ç–∞

üèÜ *–ö–∞—á–µ—Å—Ç–≤–æ:*
‚Ä¢ –¢–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏  
‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞
‚Ä¢ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å

*–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É –ª—é–±–∏—Ç–µ–ª–µ–π –≤–∫—É—Å–Ω–æ–π –µ–¥—ã!*
        """
        
        keyboard = [
            [InlineKeyboardButton("üè™ –í—ã–±—Ä–∞—Ç—å –∫–∞—Ñ–µ", callback_data="show_cafes")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    async def test_payment_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π"""
        user = update.effective_user
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å
        title = "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ GreatIdeas"
        description = "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –ÆKassa"
        payload = f"test_payment_{user.id}"
        currency = "RUB"
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Ü–µ–Ω—ã (–≤ –∫–æ–ø–µ–π–∫–∞—Ö)
        prices = [
            LabeledPrice("–ö–æ—Ñ–µ –õ–∞—Ç—Ç–µ", 25000),  # 250 —Ä—É–±–ª–µ–π
            LabeledPrice("–ö—Ä—É–∞—Å—Å–∞–Ω", 15000),    # 150 —Ä—É–±–ª–µ–π
        ]
        
        await context.bot.send_invoice(
            chat_id=update.effective_chat.id,
            title=title,
            description=description,
            payload=payload,
            provider_token=settings.PAYMENT_PROVIDER_TOKEN,
            currency=currency,
            prices=prices,
            photo_url="https://via.placeholder.com/300x200?text=GreatIdeas+Test",
            need_name=True,
            need_phone_number=True,
            need_email=False,
            need_shipping_address=False,
            is_flexible=False,
        )
    
    async def create_order_invoice(self, chat_id: int, telegram_user_id: int, cart_data: dict, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–≤–æ–π—Å –¥–ª—è –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
        try:
            payment_service = TelegramPaymentService()
            telegram_user = TelegramUser.objects.get(telegram_id=telegram_user_id)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
            order = payment_service.create_order_from_cart(
                telegram_user=telegram_user,
                cart_data=cart_data,
                delivery_type='pickup',  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∞–º–æ–≤—ã–≤–æ–∑
            )
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
            payment = payment_service.create_payment(order)
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ü–µ–Ω –¥–ª—è –∏–Ω–≤–æ–π—Å–∞
            prices = payment_service.create_invoice_prices(order)
            
            title = f"–ó–∞–∫–∞–∑ #{order.order_number}"
            description = f"–ó–∞–∫–∞–∑ –≤ {order.cafe.name}\n–í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {order.items.count()}"
            
            await context.bot.send_invoice(
                chat_id=chat_id,
                title=title,
                description=description,
                payload=payment.invoice_payload,
                provider_token=settings.PAYMENT_PROVIDER_TOKEN,
                currency=payment.currency,
                prices=prices,
                photo_url=order.cafe.logo.url if order.cafe.logo else None,
                need_name=True,
                need_phone_number=True,
                need_email=False,
                need_shipping_address=order.delivery_type == 'delivery',
                is_flexible=False,
            )
            
            return order
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {e}")
            await context.bot.send_message(
                chat_id=chat_id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return None
    
    async def pre_checkout_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ pre_checkout_query"""
        query = update.pre_checkout_query
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑
            payment_service = TelegramPaymentService()
            order = payment_service.get_order_by_payment_payload(query.invoice_payload)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –µ—â–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω
            if order.status == 'paid':
                await query.answer(
                    ok=False, 
                    error_message="–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω"
                )
                return
            
            # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
            await query.answer(ok=True)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ pre_checkout: {e}")
            await query.answer(
                ok=False, 
                error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–∫–∞–∑–∞"
            )
    
    async def successful_payment_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
        payment_info = update.message.successful_payment
        
        try:
            payment_service = TelegramPaymentService()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
            order = payment_service.process_successful_payment({
                'invoice_payload': payment_info.invoice_payload,
                'telegram_payment_charge_id': payment_info.telegram_payment_charge_id,
                'provider_payment_charge_id': payment_info.provider_payment_charge_id,
            })
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            success_text = f"""
‚úÖ *–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!*

*–ó–∞–∫–∞–∑:* #{order.order_number}
*–ö–∞—Ñ–µ:* {order.cafe.name}
*–°—É–º–º–∞:* {order.total_amount} ‚ÇΩ
*–°—Ç–∞—Ç—É—Å:* –û–ø–ª–∞—á–µ–Ω

–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É. –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏!

*–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:*
"""
            
            for item in order.items.all():
                success_text += f"‚Ä¢ {item.menu_item.name}"
                if item.variant:
                    success_text += f" ({item.variant.name})"
                success_text += f" x{item.quantity} - {item.total_price} ‚ÇΩ\n"
            
            await update.message.reply_text(
                success_text,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
    
    async def run_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram Bot –≤ —Ä–µ–∂–∏–º–µ polling...")
        await self.application.run_polling(drop_pending_updates=True)


class Command(BaseCommand):
    help = '–ó–∞–ø—É—Å–∫ Telegram Bot'
    
    def handle(self, *args, **options):
        try:
            bot = TelegramBot()
            asyncio.run(bot.run_polling())
        except KeyboardInterrupt:
            self.stdout.write(
                self.style.SUCCESS('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
            )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'–û—à–∏–±–∫–∞: {e}')
            )